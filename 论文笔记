《How Linux RT_PREEMPT Works》
      The cost of the increased determinism of real time
        - Increased average latency
        - Decreased throughput
        
      Enabling real-time Linux
        - preemptible kernel
        - locking
        - threaded interrupt handlers
        - threaded softirq
        
      CONFIG_PREEMPT “fully preemptible”
        - except when preemption is explicitly disabled
        - except when interrupts are explicitly disabled
        - except when a lock is held
        (“in a critical section”)
        
       Impact of Real-Time Features
            + Variance of real-time task latency decreased
            + Maximum real-time task latency decreased
            - Average real-time task latency may be increased
            - Throughput decreased
            
            
RT-Preempt Patch对Linux kernel的主要改造包括：
                  Making in-kernel locking-primitives (using spinlocks) preemptible though reimplementation with rtmutexes:
                  Critical sections protected by i.e. spinlock_t and rwlock_t are now preemptible. The creation of non-preemptible sections (in kernel) is still possible with raw_spinlock_t (same APIs like spinlock_t)
                  Implementing priority inheritance for in-kernel spinlocks and semaphores. For more information on priority inversion and priority inheritance please consultIntroduction to Priority Inversion
                  Converting interrupt handlers into preemptible kernel threads: The RT-Preempt patch treats soft interrupt handlers in kernel thread context, which is represented by a task_struct like a common userspace process. However it is also possible to register an IRQ in kernel context.
                  Converting the old Linux timer API into separate infrastructures for high resolution kernel timers plus one for timeouts, leading to userspace POSIX timers with high resolution.
