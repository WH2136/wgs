 工作队列（workqueue）是另外一种将工作推后执行的形式，它和tasklet有所不同。工作队列可以把工
 作推后，交由一个内核线程去执行，也就是说，这个下半部分可以在进程上下文中执行。这样，通过工作
 队列执行的代码能占尽进程上下文的所有优势。最重要的就是工作队列允许被重新调度甚至是睡眠。

    那么，什么情况下使用工作队列，什么情况下使用tasklet。如果推后执行的任务需要睡眠，那么就选择
    工作队列。如果推后执行的任务不需要睡眠，那么就选择tasklet。另外，如果需要用一个可以重新调度的
    实体来执行你的下半部处理，也应该使用工作队列。它是唯一能在进程上下文运行的下半部实现的机制，
    也只有它才可以睡眠。这意味着在需要获得大量的内存时、在需要获取信号量时，在需要执行阻塞式的I/
O
操作时，它都会非常有用。如果不需要用一个内核线程来推后执行工作，那么就考虑使用tasklet。

1. 工作、工作队列和工作者线程

    如前所述，我们把推后执行的任务叫做工作（work），描述它的数据结构为work_struct，这些工作以队
   列结构组织成工作队列（workqueue），其数据结构为workqueue_struct，而工作线程就是负责执行工作队
   列中的工作。系统默认的工作者线程为events,自己也可以创建自己的工作者线程。

2. 表示工作的数据结构

工作用<Linux/workqueue.h>中定义的work_struct结构表示：

[cpp] view plain copy
在CODE上查看代码片派生到我的代码片

    struct work_struct {  
             atomic_long_t data;  
    #define WORK_STRUCT_PENDING 0            /* T if work item pending execution */  
    #define WORK_STRUCT_FLAG_MASK (3UL)  
    #define WORK_STRUCT_WQ_DATA_MASK (~WORK_STRUCT_FLAG_MASK)  
             struct list_head entry;  
             work_func_t func;  
    #ifdef CONFIG_LOCKDEP  
             struct lockdep_map lockdep_map;  
    #endif  
    };  

    这些结构被连接成链表。当一个工作者线程被唤醒时，它会执行它的链表上的所有工作。工作被执行完毕
    ， 它就将相应的work_struct对象从链表上移去。当链表上不再有对象的时候，它就会继续休眠。

3. 创建推后的工作

    要使用工作队列，首先要做的是创建一些需要推后完成的工作。可以通过DECLARE_WORK在编译时静态地建该结构：
    DECLARE_WORK(name, void (*func) (void*), void *data);
    这样就会静态地创建一个名为name，待执行函数为func，参数为data的work_struct结构。

    同样，也可以在运行时通过指针创建一个工作：
    INIT_WORK(struct work_struct *work, woid(*func) (void *), void *data);
    这会动态地初始化一个由work指向的工作。

4. 工作队列中待执行的函数

    工作队列待执行的函数原型是：
    void work_handler(void*data)

    这个函数会由一个工作者线程执行，因此，函数会运行在进程上下文中。默认情况下，允许响应中断，并且不持有任何锁。
    如果需要，函数可以睡眠。需要注意的 是，尽管该函数运行在进程上下文中，但它不能访问用户空间，因为内核线程在
    用户空间没有相关的内存映射。通常在系统调用发生时，内核会代表用户空间的进程 运行，此时它才能访问用户空间，
    也只有在此时它才会映射用户空间的内存。


5. 对工作进行调度

    现在工作已经被创建，我们可以调度它了。想要把给定工作的待处理函数提交给缺省的events工作线程，只需调用
    schedule_work(&work)；
    work马上就会被调度，一旦其所在的处理器上的工作者线程被唤醒，它就会被执行。

    有时候并不希望工作马上就被执行，而是希望它经过一段延迟以后再执行。在这种情况下，可以调度它在指定的时间执行：
    schedule_delayed_work(&work,delay);
    这时，&work指向的work_struct直到delay指定的时钟节拍用完以后才会执行。

    上面内容部分摘自：http://blog.csdn.net/zyhorse2010/article/details/6455026

6. 工作队列的简单应用

    在Workqueue机制中，提供了一个系统默认的workqueue队列——keventd_wq，这个队列是Linux系统在初始化的
    时候就创建的。用户可以直接初始化一个work_struct对象，然后在该队列中进行调度，使用更加方便。

    当用户调用workqueue的初始化接口create_workqueue或者create_singlethread_workqueue对workqueue队列
    进行初始化时，内核就开始为用户分配一个workqueue对象，并且将其链到一个全局的workqueue队列中。然后Linux
    根据当前CPU的情况，为workqueue对象分配与CPU个数相同的cpu_workqueue_struct对象，每个cpu_workqueue_struct
    对象都会存在一条任务队列。紧接着，Linux为每个cpu_workqueue_struct对象分配一个内核thread，即内核daemon
    去处理每个队列中的任务。至此，用户调用初始化接口将workqueue初始化完毕，返回workqueue的指针。

    在初始化workqueue过程中，内核需要初始化内核线程，注册的内核线程工作比较简单，就是不断的扫描对应
    cpu_workqueue_struct中的任务队列，从中获取一个有效任务，然后执行该任务。所以如果任务队列为空，
    那么内核daemon就在cpu_workqueue_struct中的等待队列上睡眠，直到有人唤醒daemon去处理任务队列。

    Workqueue初始化完毕之后，将任务运行的上下文环境构建起来了，但是具体还没有可执行的任务，所以，
    要定义具体的work_struct对象。然后将work_struct加入到任务队列中，Linux会唤醒daemon去处理任务。

    上面内容摘自：http://hi.baidu.com/%CD%EA%C3%C0%CB%C4%C4%EA/blog/item/412b8833ca91b2e61b4cff5b.html

7.补充与实验

    对于内核现成的队列，我们初始化完work后直接用queue_schedule加入系统默认的workqueue队列——keventd_wq
    并调度执行，对于我们从新创建的工作队列，需要用create_queue来创建work_queue，然后初始化work，最后，
    还需要使用queue_work加入我们创建的工作队列并调度执行。
